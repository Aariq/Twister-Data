{
    "collab_server" : "",
    "contents" : "---\ntitle: \"DHS comparison\"\noutput: html_notebook\n---\n\nI copied this over from a .R file on Nov 17, 2016 and simplified some of the code. Since we're only interested in DHS by tenax and DCSE by twister, I've deleted quite a bit of code.\n\n```{r, include=FALSE}\n#setwd(\"/Users/scottericr/Google Drive/R Code/Twister Data\")\nlibrary(reshape2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(venn)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(xlsx)\nsource(\"~/Google Drive/R Code/myfunctions.R\")\n```\n#Importing the data\n\n```{r}\ninput <- read_csv(\"DHS Comparison updated 4-7-2017.csv\") #Nicole added back two compounds she previously removed as contaminants.  They're not actually contaminants.\n\ninput2 <- input[1:12, ]\n#glimpse(input2)\n\ninput2[is.na(input2)] <- 0  #NA's represent 0's\n\n\n#Read in annotated library for later extraction of LogKOW and vapor pressure\n#library <- read_csv(\"annotated library mar 13 2017.csv\")\nlibrary <- read_csv(\"annotated library apr 6 2017.csv\")\n```\n\ncreate treatment variables\n```{r}\nvars <- colsplit(input2$Treatment, \"\\\\.\", c(\"Method\", \"Treatment\", \"Rep\"))\nvars\n\nlen <- dim(input2)[2]\ndata <- cbind(vars$Method, vars$Treatment, input2[ , 2:len])\ncolnames(data)[1:2] <- c(\"Method\",\"Treatment\")\nhead(data)\n#glimpse(data)\n```\n\nfind any compounds that are constants\n```{r}\ncounts <- head(summarise_each(data, funs(n_distinct)))\nrm <- which(counts <= 1)\nrm\n#REMINDER TO INSERT IF STATEMENT SO IT DOESN\"T RUN IF RM IS LENGHT 0\"\ndata <- subset(data, select = -rm)\n#glimpse(data)\n```\n\n## With only DHS Tenax vs. DCSE Twister\n```{r}\ndata %>% group_by(Method) %>% summarise_all(funs(mean)) -> compare.data\ncompare.data[ , -(1:2)] %>% t() %>% as.data.frame() -> compare.data\ncolnames(compare.data) <- c(\"DHS\", \"DCSE\")\ncompare.data$Compound <- rownames(compare.data)\nrownames(compare.data) <- NULL\n\n##Venn Diagram\nmethod.logical <- compare.data\nmethod.logical$DHS[method.logical$DHS != 0] <- 1\nmethod.logical$DCSE[method.logical$DCSE !=0] <- 1\n\nvenn(method.logical[ , 1:2], cexil = 1, cexsn = .85)\n\n#Extract Unique Compounds\nselect(compare.data, Compound, everything()) %>% filter(DHS == 0 & DCSE != 0 | DHS !=0 & DCSE ==0) -> method_unique_compounds\nleft_join(method_unique_compounds, library, by = c(\"Compound\" = \"IA_Name\")) %>% select(Compound, DHS, DCSE, Log_P, Vapor_Pressure, Vapor_Pressure_At) -> method_unique_compounds\nmethod_unique_compounds\n\ndim(method.logical)\ncolSums(method.logical[ , 1:2])\ncolSums(method.logical[ , 1:2])\n```\n\nA total of `r colSums(method.logical[ , 1:2])[1]` compounds were detected by DHS and `r colSums(method.logical[ , 1:2])[2]` compounds were detected by DCSE.  `r dim(filter(method_unique_compounds, DHS != 0))[1]` of these compounds were unique to DHS sampling and `r dim(filter(method_unique_compounds, DCSE != 0))[1]` were unique to DCSE.\n\n##By treatment\n```{r}\ndata %>% group_by(Treatment) %>% summarise_all(funs(mean)) -> treatment.data\ntreatment.data[ , -(1:2)] %>% t() %>% as.data.frame() -> treatment.data\ncolnames(treatment.data) <- c(\"Control\", \"MeJA\")\ntreatment.data$Compound <- rownames(treatment.data)\nrownames(treatment.data) <- NULL\n\n##Venn Diagram\ntreatment.logical <- treatment.data\ntreatment.logical$Control[treatment.logical$Control != 0] <- 1\ntreatment.logical$MeJA[treatment.logical$MeJA !=0] <- 1\n\nvenn(treatment.logical[ , 1:2], cexil = 1, cexsn = .85)\n\n#Extract Unique Compounds\nselect(treatment.data, Compound, everything()) %>% filter(Control == 0 & MeJA != 0 | Control !=0 & MeJA ==0) -> treatment_unique_compounds\nleft_join(treatment_unique_compounds, library, by = c(\"Compound\" = \"IA_Name\")) %>% select(Compound, Control, MeJA, Log_P, Vapor_Pressure, Vapor_Pressure_At) -> treatment_unique_compounds\ntreatment_unique_compounds\ncolSums(treatment.logical[ , 1:2])\n```\n\n`r colSums(treatment.logical[ , 1:2])[1]` compounds in Control, ``r colSums(treatment.logical[ , 1:2])[2]`` found in MeJA treated plants.  `r dim(filter(treatment_unique_compounds, Control != 0))[1]` compounds are unique to Control plants and `r dim(filter(treatment_unique_compounds, MeJA != 0))[1]` compounds are unique to MeJA treated plants.\n\n\n##By treatment AND method\n```{r}\ndata %>% group_by(Treatment, Method) %>% summarise_all(funs(mean)) -> combo.data\ncombo.data[ , -(1:2)] %>% t() %>% as.data.frame() -> combo.data1\ncolnames(combo.data1) <- paste(combo.data$Method, combo.data$Treatment, sep = \".\")\ncombo.data1$Compound <- rownames(combo.data1)\nrownames(combo.data1) <- NULL\n\n##Venn Diagram\ncombo.logical <- combo.data1\ncombo.logical$DHS.Cont[combo.logical$DHS.Cont != 0] <- 1\ncombo.logical$DCSE.Cont[combo.logical$DCSE.Cont != 0] <- 1\ncombo.logical$DHS.MeJA[combo.logical$DHS.MeJA != 0] <- 1\ncombo.logical$DCSE.MeJA[combo.logical$DCSE.MeJA != 0] <- 1\n\nvenn(combo.logical[ , 1:4], cexil = 1, cexsn = .85)\ncolSums(combo.logical[ , 1:4])\n\n#unique to MeJA/DCSE combo\ncombo.logical %>% filter(DCSE.MeJA == 1, DCSE.Cont == 0, DHS.Cont == 0, DHS.MeJA == 0)\n\n#unique to MeJA/DHS combo\ncombo.logical %>% filter(DCSE.MeJA == 0, DCSE.Cont == 0, DHS.Cont == 0, DHS.MeJA == 1)\n\n```\n\n## Write to a file\n```{r}\nwrite.xlsx(method_unique_compounds, \"unique compounds DHS comparison.xlsx\", \n           sheetName = \"By Method\", row.names = FALSE)\nwrite.xlsx(treatment_unique_compounds, \"unique compounds DHS comparison.xlsx\", \n           sheetName = \"By Treatment\", row.names = FALSE, append = TRUE)\n```\n\n#PCA\nI conduct a PCA and plot PC1 vs PC2\n```{r}\ndata.scaled <- scale(data[3:length(data)])\nall.pca <- prcomp(data.scaled, scale. = FALSE, center = FALSE)\nsummary(all.pca)\n#4 PCs to capture ~80% of variance\n#screeplot(all.pca,type=\"l\")\n```\n80% of variation captured in ~4 PCs\n\n## PCA Plot\n```{r plot theme}\n##my ggplot2 theme\nmultivar.theme <- theme_bw(base_size = 7, base_family = \"Helvetica\")+  #this changes the default text size and font\n  theme(axis.title = element_text(size = 7),                      #this sets a different font size for the axis labels\n        panel.border = element_rect(size = .5, color = \"black\"),   #change size= here to change border size\n        panel.grid.major = element_blank(),                     #these two lines make the grid lines go away\n        panel.grid.minor = element_blank(),\n        legend.text = element_text(size = 7),                  #legend font size\n        legend.background = element_rect(color = \"black\", size = 0.25),\n        legend.key.size = unit(.4, \"lines\"),\n        legend.spacing = unit(.4, \"lines\"))         #changes horizontal spacing\n```\n\n```{r}\nMethod <- data$Method\nTreatment <- data$Treatment\nshape.labels = c(\"DCSE\", \"DHS\")\ncol.labels = c(\"Control\", \"MeJA\")\ncols <- c(\"Cont\" = \"#1b9e77\", \"MeJA\" = \"#d95f02\")\nggplot(as.data.frame(all.pca$x), aes(PC1, PC2)) + \n  geom_point(aes(fill = Treatment, shape = Method), size = I(2)) + \n  xlim(-18, 18) +\n  multivar.theme + \n  scale_shape_manual(name = \"Method:\",\n                     values = c(21, 24), \n                     labels = shape.labels) +\n  scale_fill_manual(name = \"Treatment:\",\n                    values = cols, \n                    labels = col.labels) +\n  guides(fill = guide_legend(override.aes = list(color = cols))) +\n  theme(legend.position = \"bottom\", legend.box = \"horizontal\") +\n  ylab(paste0(\"PC2 (\",round(summary(all.pca)$importance[2,2]*100, 2), \"%)\")) + \n  xlab(paste0(\"PC1 (\",round(summary(all.pca)$importance[2,1]*100, 2), \"%)\"))\n\nggsave(\"Comparison PCA.png\", width = 3.33, height = 3.5, units = \"in\")\n```\n\n\n#Correlations\nNeed to figure out which variables (chemicals) correlate with PC1 and PC2.  I get this using a function I wrote in myfunctions.R, but I also add on columns for r^2 values and FDR corrected p-values for the correlation between RPA and PC score for each PC.\n\n\n\n```{r}\npca.correlations<-PC.cors(all.pca, as.data.frame(data.scaled), 2)\npca.correlations$PC1.r2 <- pca.correlations$PC1.corr.coefs^2\npca.correlations$PC2.r2 <- pca.correlations$PC2.corr.coefs^2\npca.correlations$PC1.p.corrected <- pca.correlations$PC1.p.values %>% p.adjust(method=\"fdr\")\npca.correlations$PC2.p.corrected <- pca.correlations$PC2.p.values %>% p.adjust(method=\"fdr\")\n\nPC1.corr.sig <- pca.correlations %>% subset(PC1.p.corrected <= 0.05 & PC1.r2 >= 0.8, \n                                            select = c(.Variables, PC1.corr.coefs, PC1.r2,\n                                                       PC1.p.corrected))\nPC2.corr.sig <- pca.correlations %>% subset(PC2.p.corrected <= 0.05 & PC2.r2 >= 0.8,\n                                            select = c(.Variables, PC2.corr.coefs, PC2.r2,\n                                                       PC2.p.corrected))\nPC1.corr.sig[,-1] <- PC1.corr.sig[,-1] %>% signif(digits=3)\n\nPC2.corr.sig[,-1] <- PC2.corr.sig[,-1] %>% signif(digits=3)\n\n\n#get vapor pressures for these babies\n\nleft_join(PC1.corr.sig, library, by = c(\".Variables\" = \"IA_Name\")) %>% select(Compound = .Variables, PC1.corr.coefs, PC1.r2, PC1.p.corrected, Log_P, Vapor_Pressure, Vapor_Pressure_At) -> PC1.corr.sig\nPC1.corr.sig\narrange(PC1.corr.sig, PC1.corr.coefs)\n\nleft_join(PC2.corr.sig, library, by = c(\".Variables\" = \"IA_Name\")) %>% select(Compound = .Variables, PC2.corr.coefs, PC2.r2, PC2.p.corrected, Log_P, Vapor_Pressure, Vapor_Pressure_At) -> PC2.corr.sig\nPC2.corr.sig\n\nwrite.xlsx(PC1.corr.sig, \"PCA compounds DHS comparison.xlsx\", \n           sheetName = \"PC1\", col.names = TRUE, row.names = FALSE)\nwrite.xlsx(PC2.corr.sig, \"PCA compounds DHS comparison.xlsx\", \n           sheetName = \"PC2\", col.names = TRUE, row.names = FALSE, append = TRUE)\n```\n\nAn alternative method might be to use FDR corrected t-tests since it is very clear that PC1 separates the methods and PC2 separates the treatments\n\n```{r}\n\nimportant.PC1.data <- select(data, one_of(as.character(PC1.corr.sig$.Variables)))\n\nsig.tests.PC1 <- vector(mode = \"numeric\", length = length(important.PC1.data))\nfor(i in 1:length(important.PC1.data)){\n  test <- t.test(important.PC1.data[[i]] ~ data$Method)\n  sig.tests.PC1[i] <- test$p.value\n}\n\nimportant.PC2.data <- select(data, one_of(as.character(PC2.corr.sig$.Variables)))\n\nsig.tests.PC2 <- vector(mode = \"numeric\", length = length(important.PC2.data))\nfor(i in 1:length(important.PC2.data)){\n  test <- t.test(important.PC2.data[[i]] ~ data$Treatment)\n  sig.tests.PC2[i] <- test$p.value\n}\n```\nThe only thing this changes is it takes Benzyl Alcohol off the list for PC2\n",
    "created" : 1492183109813.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "970786357",
    "id" : "2A57D8C3",
    "lastKnownWriteTime" : 1492193492,
    "last_content_update" : 1492193492296,
    "path" : "~/Google Drive/R Code/Twister Data/DHS Comparison Notebook.Rmd",
    "project_path" : "DHS Comparison Notebook.Rmd",
    "properties" : {
        "chunk_output_type" : "inline"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}