{
    "collab_server" : "",
    "contents" : "setwd(\"/Users/scottericr/Google Drive/R Code/Twister Data\")\nlibrary(reshape2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(venn)\nlibrary(ggplot2)\nsource(\"/Users/scottericr/Google Drive/R Code/myfunctions.R\")\n\n\n#####Read in data#######\n#contam<-read.csv(\"DHS Comparison.csv\")\ncomp.data <- read.csv(\"DHS Comparison updated.csv\") #Nicole added back two compounds she previously removed as contaminants.  They're not actually contaminants.\nhead(comp.data)\ncomp.data[is.na(comp.data)]=0  #NA's represent 0's\nglimpse(comp.data)\n\n#create treatment variables\nvars <- colsplit(comp.data$Treatment, \"\\\\.\", c(\"Method\", \"Treatment\", \"Rep\"))\nvars\n\ndim(comp.data)\ndata <- cbind(vars$Method, vars$Treatment, comp.data[,2:291])\ncolnames(data)[1:2] <- c(\"Method\",\"Treatment\")\nglimpse(data[,1:15])\n\n#find any compounds that are constants\ncounts<-head(summarise_each(data, funs(n_distinct)))\nglimpse(counts)\nrm <- which(counts <= 1)\nrm\ndata <- subset(data, select = -rm)\n#########################\n\n####Venn Diagram####\nx<-as.data.frame(t(data[3:length(data)]))\ncolnames(x) <- contam$Treatment\nhead(x)\nx.logical<-transmute(x, Tenax = Tenax.Cont.1 + Tenax.Cont.2 + Tenax.Cont.3 + \n                Tenax.MeJA.1 + Tenax.MeJA.2 + Tenax.MeJA.3, \n                Twister = Twister.Cont.1 + Twister.Cont.2 + Twister.Cont.3 + \n                Twister.MeJA.1 + Twister.MeJA.2 + Twister.MeJA.3,\n                PDMS = PDMS.Cont.1 + PDMS.Cont.2 + PDMS.Cont.3 +\n                PDMS.MeJA.1 + PDMS.MeJA.2 + PDMS.MeJA.3,\n                Strip = Strip.Cont.1 + Strip.Cont.2 + Strip.Cont.3 + \n                Strip.MeJA.1 + Strip.MeJA.2)\nx.logical[x.logical>0] = 1\ntail(x.logical)\nhead(x)\nvenn(x.logical, cexil = 1, cexsn = .85)\n\n##Total##\ncolSums(x.logical)\n\n#Find the compounds unique to each method\nTenax.unique <- subset(x, x.logical$Twister == 0 & x.logical$PDMS == 0 & x.logical$Strip == 0)\ndim(Tenax.unique)\n\n\nTwister.unique <- subset(x, x.logical$Tenax == 0 & x.logical$PDMS == 0 & x.logical$Strip == 0)\ndim(Twister.unique)\n\nPDMS.unique <- subset(x, x.logical$Tenax == 0 & x.logical$Twister == 0 & x.logical$Strip == 0)\ndim(PDMS.unique)\n\nStrip.unique <- subset(x, x.logical$Tenax == 0 & x.logical$Twister == 0 & x.logical$PDMS == 0)\ndim(Strip.unique)\n\n#in BOTH DHS methods but not in either DCSE method\nDHS.unique.wrong <- subset(x, x.logical$Tenax == 1 & x.logical$PDMS == 1 & x.logical$Twister == 0 & x.logical$Strip == 0)\ndim(DHS.unique.wrong)\n\n\nDCSE.unique.wrong <- subset(x, x.logical$Tenax == 0 & x.logical$PDMS == 0 & x.logical$Twister == 1 & x.logical$Strip == 1)\ndim(DCSE.unique.wrong)\n\n#what you should do is add a column identifying all samples as DCSE or DHS, then do as above.  Compare with changing & to | with dim() to check\n\nglimpse(x)\nhead(x)\nglimpse(x.logical)\n#Shit.  Gotta go back to before x.logical was created.\n##By headspace vs. direct contact\nx.method<-transmute(x, DHS = Tenax.Cont.1 + Tenax.Cont.2 + Tenax.Cont.3 + \n                       Tenax.MeJA.1 + Tenax.MeJA.2 + Tenax.MeJA.3 + \n                      PDMS.Cont.1 + PDMS.Cont.2 + PDMS.Cont.3 +\n                      PDMS.MeJA.1 + PDMS.MeJA.2 + PDMS.MeJA.3, \n                     DCSE = Twister.Cont.1 + Twister.Cont.2 + Twister.Cont.3 + \n                       Twister.MeJA.1 + Twister.MeJA.2 + Twister.MeJA.3 + \n                      Strip.Cont.1 + Strip.Cont.2 + Strip.Cont.3 + \n                       Strip.MeJA.1 + Strip.MeJA.2)\nx.method[x.method>0] = 1\ntail(x.method)\nvenn(x.method, cexil = 1, cexsn = .85)\n\nDHS.unique <- subset(x, x.method$DHS != 0 & x.method$DCSE == 0)\ndim(DHS.unique)\n\nDCSE.unique <- subset(x, x.method$DCSE !=0 & x.method$DHS == 0)\ndim(DCSE.unique)\n\n##By treatment\nx.treatment<-transmute(x, Control = Tenax.Cont.1 + Tenax.Cont.2 + Tenax.Cont.3 + \n                       Twister.Cont.1 + Twister.Cont.2 + Twister.Cont.3 + \n                       PDMS.Cont.1 + PDMS.Cont.2 + PDMS.Cont.3 +\n                       Strip.Cont.1 + Strip.Cont.2 + Strip.Cont.3,\n                      MeJA = Tenax.MeJA.1 + Tenax.MeJA.2 + Tenax.MeJA.3 + \n                       Twister.MeJA.1 + Twister.MeJA.2 + Twister.MeJA.3 +\n                       PDMS.MeJA.1 + PDMS.MeJA.2 + PDMS.MeJA.3 +\n                       Strip.MeJA.1 + Strip.MeJA.2)\n\nhead(x.treatment)\nx.trt.logical <- x.treatment\nx.trt.logical[x.trt.logical>0] = 1\ncolSums(x.trt.logical)\n\nControl.unique <- subset(x, x.treatment$Control != 0 & x.treatment$MeJA == 0)\ndim(Control.unique)\n\nMeJA.unique <- subset(x, x.treatment$Control == 0 & x.treatment$MeJA != 0)\ndim(MeJA.unique)\n\nU.compounds <- list(Tenax = rownames(Tenax.unique), Twister = rownames(Twister.unique), \n                    PDMS = rownames(PDMS.unique), Strip = rownames(Strip.unique),\n                    DHS = rownames(DHS.unique), DCSE = rownames(DCSE.unique),\n                    Control = rownames(Control.unique), MeJA = rownames(MeJA.unique))\n#maybe try to figure out how to make this list prettier\n#writes to file\nsink(\"Unique Compounds.txt\")\nU.compounds\nsink()\n\n####PCA####\ndata.scaled <- scale(data[3:length(data)])\nall.pca <- prcomp(data.scaled, scale. = FALSE, center = FALSE)\nsummary(all.pca)\n#6 or 7 PCs to capture ~80% of variance\nscreeplot(all.pca,type=\"l\")\n\nMethod <- data$Method\nTreatment <- data$Treatment\n\n#I can't figure out how else to change the text in the legend\n\nshape.labels = c(\"Control\", \"MeJA\")\ncol.labels = expression(\"Tenax DHS\", \"PDMS DHS\", \"Strip DCSE\", paste(Twister^\"Â®\",\" DCSE\"))\ncols<-c(\"PDMS\" = \"#FF5C00\", \"Tenax\" = \"#FFC000\", \"Strip\" = \"#00A779\", \"Twister\" = \"#1D1AB2\")\nggplot(as.data.frame(all.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (color=Method, shape=Treatment),size=I(4)) + \n  newphytol.theme + \n  scale_shape(labels = shape.labels, name = \"Treatment\") +\n  theme(legend.position=c(0.85, 0.75))+\n  theme(legend.text=element_text(size = 10), legend.title=element_text(size = 10),\n        legend.background = element_rect(color = \"black\")) +\n  #scale_color_brewer(palette=\"Set1\") + \n  scale_color_manual(values = cols, breaks = c(\"Tenax\", \"PDMS\", \"Strip\", \"Twister\"),\n                     labels = col.labels) + ylim(-10,20) +\n  ylab(\"PC2 (19.49%)\") + xlab(\"PC1 (26.46%)\")\n\n\npca.correlations<-PC.cors(all.pca, as.data.frame(data.scaled), 2)\npca.correlations\n\n\nwrite.csv(pca.correlations, \"DHS comparison correlations.csv\")\n\n#try with pareto scaling, which gives less importance to noise####\np.scaled<-pareto_scale(data[3:length(data)]) #from myfunctions.R\npareto.pca <- prcomp(p.scaled, scale. = FALSE, center = FALSE)\nsummary(pareto.pca)\n\nggplot(as.data.frame(pareto.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (color=Method, shape=Treatment),size=I(5)) + \n  mytheme+ \n  theme(legend.position=c(\"bottom\"))+\n  theme(legend.text=element_text(size=18), legend.title=element_text(size=18))+\n  scale_color_brewer(palette=\"Dark2\") #+ ylab(\"PC2 (19.47%)\") + xlab(\"PC1 (26.55%)\")\n\n#unsurprisingly, separation between methods is less good with pareto scaling, \n#since the differences between methods is probably due to low concentration compounds and pareto scaling doesn't give as much importance to small peaks\n###########\n\n##subset of just Tenax DHS and Twister DCSE####\ndata.sub1 <- subset(data, Method == \"Tenax\" | Method == \"Twister\")\ndim(data.sub1)\nglimpse(data.sub1)\n#look for constants and remove\ncounts.sub1<-head(summarise_each(data.sub1, funs(n_distinct)))\nglimpse(counts.sub1)\nrm <- which(counts.sub1 <= 1)\nrm\ndata.sub1 <- subset(data.sub1, select = -rm)\n\nsub1.pca <- prcomp(data.sub1[3:length(data.sub1)], scale. = TRUE, center = TRUE)\nsummary(sub1.pca)\n\nggplot(as.data.frame(sub1.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (color=data.sub1$Method, shape=data.sub1$Treatment),size=I(5)) + \n  mytheme+ \n  theme(legend.position=c(\"bottom\"))+\n  theme(legend.text=element_text(size=18), legend.title=element_text(size=18))+\n  scale_color_brewer(palette=\"Dark2\") #+ ylab(\"PC2 (19.47%)\") + xlab(\"PC1 (26.55%)\")\n##better separation with Twister DCSE\n\n###Subset with just control plants####\ndata.sub2 <- subset(data, Treatment == \"Cont\")\ncounts.sub2<-head(summarise_each(data.sub2, funs(n_distinct)))\nglimpse(counts.sub2)\nrm <- which(counts.sub2 <= 1)\nrm\ndata.sub2 <- subset(data.sub2, select = -rm)\n\nsub2.pca <- prcomp(data.sub2[3:length(data.sub2)], scale. = TRUE, center = TRUE)\n\nggplot(as.data.frame(sub2.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (color=data.sub2$Method),size=I(5)) + \n  mytheme+ \n  theme(legend.position=c(\"bottom\"))+\n  theme(legend.text=element_text(size=18), legend.title=element_text(size=18))+\n  scale_color_brewer(palette=\"Dark2\") #+ ylab(\"PC2 (19.47%)\") + xlab(\"PC1 (26.55%)\")\n\n###subset with just MeJA plants####\ndata.sub3 <- subset(data, Treatment == \"MeJA\")\ncounts.sub3<-head(summarise_each(data.sub3, funs(n_distinct)))\nglimpse(counts.sub3)\nrm <- which(counts.sub3 <= 1)\nrm\ndata.sub3 <- subset(data.sub3, select = -rm)\n\nsub3.pca <- prcomp(data.sub3[3:length(data.sub3)], scale. = TRUE, center = TRUE)\n\nggplot(as.data.frame(sub3.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (color=data.sub3$Method),size=I(5)) + \n  mytheme+ \n  theme(legend.position=c(\"bottom\"))+\n  theme(legend.text=element_text(size=18), legend.title=element_text(size=18))+\n  scale_color_brewer(palette=\"Dark2\") #+ ylab(\"PC2 (19.47%)\") + xlab(\"PC1 (26.55%)\")\n\n###subsets for each method####\ndata.Tenax <- subset(data, Method == \"Tenax\")\ncounts.Tenax<-head(summarise_each(data.Tenax, funs(n_distinct)))\nglimpse(counts.Tenax)\nrm <- which(counts.Tenax <= 1)\nrm\ndata.Tenax <- subset(data.Tenax, select = -rm)\n\ndata.PDMS <- subset(data, Method == \"PDMS\")\ncounts.PDMS<-head(summarise_each(data.PDMS, funs(n_distinct)))\nglimpse(counts.PDMS)\nrm <- which(counts.PDMS <= 1)\nrm\ndata.PDMS <- subset(data.PDMS, select = -rm)\n\ndata.Strip <- subset(data, Method == \"Strip\")\ncounts.Strip <- head(summarise_each(data.Strip, funs(n_distinct)))\nglimpse(counts.Strip)\nrm <- which(counts.Strip <= 1)\nrm\ndata.Strip <- subset(data.Strip, select = -rm)\n\ndata.Twister <- subset(data, Method == \"Twister\")\ncounts.Twister <- head(summarise_each(data.Twister, funs(n_distinct)))\nglimpse(counts.Twister)\nrm <- which(counts.Twister <= 1)\nrm\ndata.Twister <- subset(data.Twister, select = -rm)\n\nTenax.pca <- prcomp(data.Tenax[3:length(data.Tenax)], scale. = TRUE, center = TRUE)\nPDMS.pca <- prcomp(data.PDMS[3:length(data.PDMS)], scale. = TRUE, center = TRUE)\nStrip.pca <- prcomp(data.Strip[3:length(data.Strip)], scale. = TRUE, center = TRUE)\nTwister.pca <- prcomp(data.Twister[3:length(data.Twister)], scale. = TRUE, center = TRUE)\n\nTenax.plot <- ggplot(as.data.frame(Tenax.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (shape=data.Tenax$Treatment),size=I(5)) + \n  mytheme + theme(legend.position=c(\"bottom\"))\n\nPDMS.plot <- ggplot(as.data.frame(PDMS.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (shape=data.PDMS$Treatment),size=I(5)) + \n  mytheme + theme(legend.position=c(\"bottom\"))\n\nStrip.plot <- ggplot(as.data.frame(Strip.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (shape=data.Strip$Treatment),size=I(5)) + \n  mytheme + theme(legend.position=c(\"bottom\"))\n\nTwister.plot <- ggplot(as.data.frame(Twister.pca$x), aes(PC1,PC2)) + \n  geom_point(aes (shape=data.Twister$Treatment),size=I(5)) + \n  mytheme + theme(legend.position=c(\"bottom\"))\n\nopar<-par(mfrow=c(2,2))\nTenax.plot\nPDMS.plot\nStrip.plot\nTwister.plot\npar(opar)\n\n###only compounds unique to DCSE\n#subset by method\ndata.DCSE<- t(DCSE.unique)\ndata.DCSE <- subset(data.DCSE, vars$Method == \"Twister\")\n#subset by list of compounds\ndata.DCSE\ndim(data.DCSE)\n\nscaled.DCSE<- scale(data.DCSE)\nunique.PCA <- prcomp(scaled.DCSE, scale. = FALSE)\nsummary(unique.PCA)\nscreeplot(unique.PCA,type=\"l\")\n\ndata.DCSE\n#Method <- c(rep(\"Twister\",6),rep(\"Strip\",5))\n#Treatment <- c(rep(\"Control\", 3), rep(\"MeJA\", 3), rep(\"Control\",3), rep(\"MeJA\", 2))\nTreatment <- c(rep(\"Control\", 3), rep(\"MeJA\", 3))\nggplot(as.data.frame(unique.PCA$x), aes(PC1,PC2)) + \n  geom_point(aes(color=Treatment),size=I(4)) + \n  newphytol.theme #+ \n  #scale_shape(labels = shape.labels, name = \"Treatment\") +\n  #theme(legend.position=c(0.85, 0.75))+\n  #theme(legend.text=element_text(size = 10), legend.title=element_text(size = 10),\n  #      legend.background = element_rect(color = \"black\")) +\n  #scale_color_brewer(palette=\"Set1\") + \n  #scale_color_manual(values = cols, breaks = c(\"Tenax\", \"PDMS\", \"Strip\", \"Twister\"),\n   #                  labels = col.labels) +\n  #ylab(\"PC2 (19.47%)\") + xlab(\"PC1 (26.55%)\")\n\n##Next steps:\n#  -Decide on making a table with 14 rows or including this PCA (leaning toward table)\n#  -Figure out appropriate correction for multiple testing\n#  -Do t-tests on all 14 unique-to-DCSE compounds to look for important differences we are missing with DHS\n#  -Figure out if those differentially abundant metabolites have known biological importance\n#  -redo with read_csv() from the readr package (doesn't fuck with column names)\n\n\n\n## t-Tests for DCSE unique compounds\nglimpse(data.DCSE)\ncontrol.data <- data.DCSE[Treatment == \"Control\",]\nMeJA.data <- data.DCSE[Treatment == \"MeJA\",]\nt.test(control.data[,14],MeJA.data[,14])\n#sample size too small to detect many differences :-(\nhead(control.data)\n\ncomparisons = dim(control.data)[2]\nt.table <- data_frame(Compound = colnames(control.data), stat = NA, p.value = NA, Control.means = NA, MeJA.means = NA)\nt.table\nfor(i in 1:comparisons){\n  temp <- t.test(control.data[ ,i], MeJA.data[ ,i])\n  t.table$p.value[i] <- temp$p.value\n  t.table$stat[i] <- temp$statistic\n  t.table$Control.means[i] <- colMeans(control.data)[i]\n  t.table$MeJA.means[i] <- colMeans(MeJA.data)[i]\n}\nt.table$p.adj <- p.adjust(t.table$p.value, method = \"bonferroni\")\nlibrary(knitr)\nt.table[t.table$p.value <= 0.05,] %>%\n  kable(digits = 4)\n\n## t-Tests for DHS unique compounds\ndata.DHS<- t(DHS.unique)\nglimpse(data.DHS)\ncontrol.DHS <- data.DHS[Treatment == \"Control\",]\nMeJA.DHS <- data.DHS[Treatment == \"MeJA\",]\n\ncomparisons = dim(control.DHS)[2]\nt.table <- data_frame(Compound = colnames(control.DHS), p.value = NA, Control.means = NA, MeJA.means = NA)\nt.table\nfor(i in 1:comparisons){\n  temp <- t.test(control.DHS[ ,i], MeJA.DHS[ ,i])\n  t.table$p.value[i] <- temp$p.value\n  t.table$Control.means[i] <- colMeans(control.data)[i]\n  t.table$MeJA.means[i] <- colMeans(MeJA.data)[i]\n}\nt.table$p.adj <- p.adjust(t.table$p.value, method = \"fdr\")\nlibrary(knitr)\nt.table[t.table$p.value <= 0.2,] %>%\n  kable(digits = 4)\n",
    "created" : 1491417626385.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2780857706",
    "id" : "3D8014F8",
    "lastKnownWriteTime" : 1479412448,
    "last_content_update" : 1479412448,
    "path" : "~/Google Drive/R Code/Twister Data/DHS comparison.R",
    "project_path" : "DHS comparison.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}