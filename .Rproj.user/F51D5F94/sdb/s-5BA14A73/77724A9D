{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Contamination Experiment\"\noutput:\n  html_notebook: default\n  pdf_document: default\n---\n\nWe conducted a contamination experiment with a blend of GLVs.  We sampled with both DCSE and DHS with either 1) just the GLV blend, 2) just tea plants, or 3) tea plants with the blend of GLVs at the soil level.\n\nUnfortunately background readings are missing for two treatment * method runs (one because of low signal, one because we ran out of tenax tubes).  I'm going to use averages from the other two reps for these.  Not sure if that is best practice yet.\n\n```{r}\nlibrary(tidyverse)\nlibrary(xtable)\n```\n\n```{r}\ninput <- read_csv(\"Contamination.csv\")[ , 1:5]\ninput\nbackground <- read_csv(\"Contamination background.csv\")\nbackground %>% group_by(Method, Treatment, Compound) %>% \n  mutate(mean.conc = mean(Concentration, na.rm = TRUE)) -> mean.background\n\n#replace NAs with means from other two reps for that experiment\nmean.background$Concentration[is.na(mean.background$Concentration)] <- mean.background$mean.conc[is.na(mean.background$Concentration)]\n\ndata <- input\ndata$Concentration = input$Concentration - mean.background$Concentration\ndata$Concentration[data$Concentration < 0] <- 0\ndata\n```\nFor a paired t-test need both x and y.  So need to wrangle to have separate vectors for each compound x method combination for just plants and plants + glvs (both)\n\n```{r}\ndata %>% filter(Method == \"DCSE\") %>% \n  filter(Treatment != \"glvs\") %>% \n  spread(key = Compound, value = Concentration) -> DCSE.data\nDCSE.data\n\ndata %>% filter(Method == \"DHS\") %>% \n  filter(Treatment != \"glvs\") %>% \n  spread(key = Compound, value = Concentration) -> DHS.data\nDHS.data\n```\nOk, now I need to do t-tests for each compound\n```{r}\nfnx <- function(df){\n  results <- data.frame(Compound = colnames(df)[4:9], p.value = rep(NA,6))\n\n  for(i in 4:9){\n    x <- df[1:3, i][[1]]\n    y <- df[4:6, i][[1]]\n    result <- t.test(x = x, y = y, paired = TRUE)\n    results$statistic[i-3] <- result$statistic\n    results$df[i-3] <- result$parameter\n    results$p.value[i-3]<- result$p.value\n  }\n  return(results)\n}\n\nfnx(DCSE.data)\nfnx(DHS.data)\n```\nCool, now make a fancy table with `xtable`\n```{r}\n#DCSE data first\nDCSE.data %>%  gather(key = Compound, value = Concentration, -Treatment, -Method, -Plant) -> summary1\nsummary1\nboth.data <- filter(summary1, Treatment == \"both\")[,-c(1:2)]\nplants.data <- filter(summary1, Treatment == \"plants\")[, -c(1:2)]\n\nsummary2 <- data.frame(Plant = both.data$Plant, Compound = both.data$Compound, Just.Plant = plants.data$Concentration, GLV.and.Plant = both.data$Concentration)\nsummary2$Difference <- summary2$GLV.and.Plant - summary2$Just.Plant\nsummary2 %>% \n  group_by(Compound) %>% \n  summarise_all(funs(mean)) %>% \n  select(-Plant) %>% \n  left_join(fnx(DCSE.data)) -> summary3\nsummary3$p.value[is.nan(summary3$p.value)] <- NA\ncolnames(summary3) <- c(\"Compound\", \"Plant Only\", \"Plant + GLV blend\", \"Difference\", \"p-Value\")\nwrite_csv(summary3, \"DCSE contamination output.csv\")\n\n\nDHS.data %>%  gather(key = Compound, value = Concentration, -Treatment, -Method, -Plant) -> summary1.DHS\nsummary1.DHS\nboth.data.DHS <- filter(summary1.DHS, Treatment == \"both\")[,-c(1:2)]\nplants.data.DHS <- filter(summary1.DHS, Treatment == \"plants\")[, -c(1:2)]\n\nsummary2.DHS <- data.frame(Plant = both.data.DHS$Plant, Compound = both.data.DHS$Compound, Just.Plant = plants.data.DHS$Concentration, GLV.and.Plant = both.data.DHS$Concentration)\nsummary2.DHS$Difference <- summary2.DHS$GLV.and.Plant - summary2.DHS$Just.Plant\n\nsummary2.DHS %>% \n  group_by(Compound) %>% \n  summarise_all(funs(mean)) %>% \n  select(-Plant) %>% \n  left_join(fnx(DHS.data)) -> summary3.DHS\n\ncolnames(summary3.DHS) <- c(\"Compound\", \"Plant Only\", \"Plant + GLV blend\", \"Difference\", \"p-Value\")\nwrite_csv(summary3.DHS, \"DHS contamination output.csv\")\n\n```\n\n\n\n\n```{r}\noutput <- xtable(summary3, digits = c(0,0,2,2,2,3))\n```\n\n```{r, results='asis'}\nprint(output, NA.string = \"NA\", type = \"html\")\n```\n",
    "created" : 1494262996518.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3897562990",
    "id" : "77724A9D",
    "lastKnownWriteTime" : 1494295502,
    "last_content_update" : 1494295502275,
    "path" : "~/Google Drive/R Code/Twister Data/Background Contamination.Rmd",
    "project_path" : "Background Contamination.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}