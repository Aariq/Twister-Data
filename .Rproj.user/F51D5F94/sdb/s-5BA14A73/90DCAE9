{
    "collab_server" : "",
    "contents" : "####Libraries Required###\nlibrary(ggplot2)\nlibrary(scales)\n\n######This function gives you correlation coefficients \n######(and p-values) between your vairalbes and however many PCs you want\n######It could be improved by formating the results nicer using format() \n######and by including an option to sort the results by PC, and by p-value or correlation coefficient or something.\nPC.cors <- function(pca, just.data, n.PCs){\n  a <- array(NA, c(n.PCs, length(just.data)))\n  p <- array(NA, c(n.PCs, length(just.data)))\n  ###get the correlation coefficients\n  for(j in 1:n.PCs){\n    for(i in 1:length(just.data)){\n      cors <- cor.test(pca$x[ , j], just.data[ , i])\n      a[j, i] = cors$estimate\n    }\n  }\n  b = as.data.frame(names(just.data))\n  allcors <- cbind(t(a), b)\n  colnames(allcors) <- c(colnames(pca$x)[1:n.PCs], \".Variables\")\n  ###get the p-values\n  for(j in 1:n.PCs){\n    for(i in 1:length(just.data)){\n      cors <- cor.test(pca$x[ , j], just.data[ , i])\n      p[j, i] = cors$p.value\n    }\n  }\n  q = as.data.frame(names(just.data))\n  allps <- cbind(t(p), q)\n  colnames(allps) <- c(colnames(pca$x)[1:n.PCs], \".Variables\")\n  table <- merge(allps, allcors, by = \".Variables\", suffixes = c(\".p.values\", \".corr.coefs\"))\n  \n  return(table[ , order(colnames(table))]) \n}\n\n\n##my ggplot2 theme\nmytheme<-theme_bw(base_size=18, base_family=\"Arial\")+                        #this changes the default text size and font for the graph\n  theme(axis.title=element_text(size=20),                                    #this sets a different font size for the axis labels\n        panel.border = element_rect(size=2, color=\"black\"),                  #change size= here to change border size\n        panel.grid.major=element_blank(),                                    #these two lines make the grid lines go away\n        panel.grid.minor=element_blank())\n\n##new phytologist theme.  To-do, make symbols open rather than filled\nnewphytol.theme<-theme_bw(base_size=14, base_family=\"Arial\")+                        #this changes the default text size and font for the graph\n  theme(axis.title=element_text(size=14),                                    #this sets a different font size for the axis labels\n        panel.border = element_rect(size=1.4, color=\"black\"),                  #change size= here to change border size\n        panel.grid.major=element_blank(),                                    #these two lines make the grid lines go away\n        panel.grid.minor=element_blank(),\n        legend.key = element_rect(colour = NA),\n        legend.text.align = 0)                             #removes goofy boxes on legend\n\n##this creates a prettier bi-plot. currently uses loadings, could be modified to plot correlations. Arrows don't work anymore with geom_segment?\n\nPCbiplot <- function(PC, x=\"PC1\", y=\"PC2\", shape.by=\"NULL\",color.by=\"NULL\") {\n  # PC being a prcomp object\n  data <- data.frame(PC$x)\n  plot <- ggplot(data,aes_string(x=x,y=y)) + geom_point(aes_string(shape=shape.by,color=color.by),size=3)\n  plot <- plot + geom_hline(aes(0), size=.4) + geom_vline(aes(0), size=.2)\n  datapc <- data.frame(varnames=rownames(PC$rotation), PC$rotation)\n  mult <- min(\n    (max(data[,y]) - min(data[,y])/(max(datapc[,y])-min(datapc[,y]))),\n    (max(data[,x]) - min(data[,x])/(max(datapc[,x])-min(datapc[,x])))\n  )\n  datapc <- transform(datapc,\n                      v1 = .7 * mult * (get(x)),\n                      v2 = .7 * mult * (get(y))\n  )\n  plot <- plot + coord_equal() + geom_text(data=datapc, aes(x=v1, y=v2, label=varnames), size = 5, vjust=1, color=\"red4\")\n  plot <- plot + geom_segment(data=datapc, aes(x=0, y=0, xend=v1, yend=v2), alpha=0.75, color=\"red4\")\n  plot\n}\n\n##for getting the lower panel in pairs() to display correlation coefficients\n##use like: pairs(data, lower.panel = panel.cor)\n\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor)\n{\n  usr <- par(\"usr\"); on.exit(par(usr))\n  par(usr = c(0, 1, 0, 1))\n  r = (cor(x, y))\n  txt <- format(c(r, 0.123456789), digits=digits)[1]\n  txt <- paste(prefix, txt, sep=\"\")\n  if(missing(cex.cor)) cex <- 0.8/strwidth(txt)\n  text(0.5, 0.5, txt, cex = cex * abs(r))\n}\n\n####Pretty scientific notation labels for ggplot.  Use like this: + scale_y_continuous(labels=scientific_10)####\nscientific_10 <- function(x) {\n  parse(text=gsub(\"e\", \" %*% 10^\", scientific_format()(x)))\n}\n\n\n#####Pareto scaling with optional mean-centering#####\npareto_scale<- function(x, center = TRUE) {\n  if (center){\n    apply(x, 2, function(y) (y - mean(y))/sqrt(sd(y)))\n  } else \n    apply(x, 2, function(y) (y/sqrt(sd(y))))\n}\n",
    "created" : 1490897867914.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1040553925",
    "id" : "90DCAE9",
    "lastKnownWriteTime" : 1491514527,
    "last_content_update" : 1491514527333,
    "path" : "~/Google Drive/R Code/myfunctions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}